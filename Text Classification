{"cells":[{"cell_type":"markdown","source":["# **Mengunduh dan Import Library/Package Python yang Dibutuhkan**"],"metadata":{"id":"vYUBHCt8kjBD"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0dLgfTw4SSlR","outputId":"7c65217a-9b97-45d8-81f1-830846f1e897","executionInfo":{"status":"ok","timestamp":1679518705663,"user_tz":-420,"elapsed":2794,"user":{"displayName":"Muhammad Fadhil Al Hafiz","userId":"08954005111788787553"}}},"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n","[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Package punkt is already up-to-date!\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":1}],"source":["# Download sub-library dari NLTK yang dibutuhkan.\n","import nltk\n","nltk.download('stopwords')\n","nltk.download('punkt')"]},{"cell_type":"code","execution_count":38,"metadata":{"id":"t68PiZcNQpq0","executionInfo":{"status":"ok","timestamp":1679523373671,"user_tz":-420,"elapsed":1301,"user":{"displayName":"Muhammad Fadhil Al Hafiz","userId":"08954005111788787553"}}},"outputs":[],"source":["# Import library dan package Python yang dibutuhkan.\n","import re\n","import string\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","from nltk.corpus import stopwords\n","from nltk.tokenize import word_tokenize\n","\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.model_selection import train_test_split\n","\n","from tensorflow.keras.utils import to_categorical\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","\n","import tensorflow as tf\n","from keras.models import Model\n","from keras.regularizers import l1, l2\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.callbacks import EarlyStopping\n","from keras.layers import LSTM, Activation, Dense, Dropout, Input, Embedding"]},{"cell_type":"markdown","source":["# **Mounting Drive**"],"metadata":{"id":"7bXt8OZskqKH"}},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4464,"status":"ok","timestamp":1679518715014,"user":{"displayName":"Muhammad Fadhil Al Hafiz","userId":"08954005111788787553"},"user_tz":-420},"id":"S5tbyjXjQ2FQ","outputId":"d940f692-d6aa-45fd-ec74-0d6077e0409a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["# Mounting drive.\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","source":["# **Definisi Fungsi dan Stopwords**"],"metadata":{"id":"4_uvlJHaktrf"}},{"cell_type":"code","execution_count":4,"metadata":{"id":"8D27h1V5Qpq5","executionInfo":{"status":"ok","timestamp":1679518715015,"user_tz":-420,"elapsed":55,"user":{"displayName":"Muhammad Fadhil Al Hafiz","userId":"08954005111788787553"}}},"outputs":[],"source":["# Variabel yang menyimpan stopwords dalam bahasa inggris.\n","stop_words = set(stopwords.words('english'))\n","\n","# Definisi fungsi clean untuk text preprocessing (berupa menghilangkan karakter selain a-z, A-Z, dan spasi).\n","def clean(text):\n","    text = re.sub(r'[^a-zA-Z ]', '', text)\n","    text = text.lower()\n","    return text    "]},{"cell_type":"markdown","source":["# **Memuat Dataset**\n","\n","\n","*   Membaca dataset, menyimpannya dalam dataframe, dan melakukan pembersihan dataset,\n","*   Pada proyek ini, saya memecah dataset untuk *validation* menjadi dua, yaitu test dan val,\n","*   Jumlah data dari dataset train adalah **16000**,\n","*   Total data dari test dan val adalah **4000**,\n","*   Sehingga total data dari dataset yang digunakan adalah **20000**, dengan rasio train - test (test & val) adalah **80:20**,\n","*   Sehingga memenuhi kriteria \"*Validation set* sebesar **20%**\".\n","\n"],"metadata":{"id":"WfM8cY-fisz7"}},{"cell_type":"code","execution_count":33,"metadata":{"id":"orwQDQnyQpq7","executionInfo":{"status":"ok","timestamp":1679522846167,"user_tz":-420,"elapsed":772,"user":{"displayName":"Muhammad Fadhil Al Hafiz","userId":"08954005111788787553"}}},"outputs":[],"source":["ds_path = '/content/drive/MyDrive/Portofolio/ML/Exercises - ML Developer Path Dicoding/Datasets'\n","\n","df_train = pd.read_csv(ds_path + '/train.txt', names=['Text', 'Emotion'], sep=';')\n","df_val = pd.read_csv(ds_path + '/val.txt', names=['Text', 'Emotion'], sep=';')\n","df_test = pd.read_csv(ds_path + '/test.txt', names=['Text', 'Emotion'], sep=';')\n","\n","X_train = df_train['Text'].apply(clean).apply(lambda x: ' '.join([word for word in x.split() if word not in (stop_words)]))\n","y_train = df_train['Emotion']\n","\n","X_test = df_test['Text'].apply(clean).apply(lambda x: ' '.join([word for word in x.split() if word not in (stop_words)]))\n","y_test = df_test['Emotion']\n","\n","X_val = df_val['Text'].apply(clean).apply(lambda x: ' '.join([word for word in x.split() if word not in (stop_words)]))\n","y_val = df_val['Emotion']\n"]},{"cell_type":"code","execution_count":34,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1679522849587,"user":{"displayName":"Muhammad Fadhil Al Hafiz","userId":"08954005111788787553"},"user_tz":-420},"id":"bvNkBb4hwpAC","outputId":"9984acf1-8852-4eea-dd3f-025563dc9a38"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                    Text  Emotion\n","0                                i didnt feel humiliated  sadness\n","1      i can go from feeling so hopeless to so damned...  sadness\n","2       im grabbing a minute to post i feel greedy wrong    anger\n","3      i am ever feeling nostalgic about the fireplac...     love\n","4                                   i am feeling grouchy    anger\n","...                                                  ...      ...\n","15995  i just had a very brief time in the beanbag an...  sadness\n","15996  i am now turning and i feel pathetic that i am...  sadness\n","15997                     i feel strong and good overall      joy\n","15998  i feel like this was such a rude comment and i...    anger\n","15999  i know a lot but i feel so stupid because i ca...  sadness\n","\n","[16000 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-b301a2d3-e6c1-4e0d-a59a-24f7f1813e2e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Text</th>\n","      <th>Emotion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>i didnt feel humiliated</td>\n","      <td>sadness</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>i can go from feeling so hopeless to so damned...</td>\n","      <td>sadness</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>im grabbing a minute to post i feel greedy wrong</td>\n","      <td>anger</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>i am ever feeling nostalgic about the fireplac...</td>\n","      <td>love</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>i am feeling grouchy</td>\n","      <td>anger</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>15995</th>\n","      <td>i just had a very brief time in the beanbag an...</td>\n","      <td>sadness</td>\n","    </tr>\n","    <tr>\n","      <th>15996</th>\n","      <td>i am now turning and i feel pathetic that i am...</td>\n","      <td>sadness</td>\n","    </tr>\n","    <tr>\n","      <th>15997</th>\n","      <td>i feel strong and good overall</td>\n","      <td>joy</td>\n","    </tr>\n","    <tr>\n","      <th>15998</th>\n","      <td>i feel like this was such a rude comment and i...</td>\n","      <td>anger</td>\n","    </tr>\n","    <tr>\n","      <th>15999</th>\n","      <td>i know a lot but i feel so stupid because i ca...</td>\n","      <td>sadness</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>16000 rows Ã— 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b301a2d3-e6c1-4e0d-a59a-24f7f1813e2e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b301a2d3-e6c1-4e0d-a59a-24f7f1813e2e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b301a2d3-e6c1-4e0d-a59a-24f7f1813e2e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":34}],"source":["df_train"]},{"cell_type":"code","execution_count":35,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1679522856222,"user":{"displayName":"Muhammad Fadhil Al Hafiz","userId":"08954005111788787553"},"user_tz":-420},"id":"bUpdmg0ewWaY","outputId":"154fb7f1-051d-48fa-8055-13ca65772166"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0                                    didnt feel humiliated\n","1        go feeling hopeless damned hopeful around some...\n","2                im grabbing minute post feel greedy wrong\n","3        ever feeling nostalgic fireplace know still pr...\n","4                                          feeling grouchy\n","                               ...                        \n","15995        brief time beanbag said anna feel like beaten\n","15996    turning feel pathetic still waiting tables sub...\n","15997                             feel strong good overall\n","15998                       feel like rude comment im glad\n","15999                         know lot feel stupid portray\n","Name: Text, Length: 16000, dtype: object"]},"metadata":{},"execution_count":35}],"source":["X_train "]},{"cell_type":"code","execution_count":36,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1679522907638,"user":{"displayName":"Muhammad Fadhil Al Hafiz","userId":"08954005111788787553"},"user_tz":-420},"id":"_5wbXXRzwcUb","outputId":"0f8f061c-9050-4885-c448-a3c51d8067b3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0        sadness\n","1        sadness\n","2          anger\n","3           love\n","4          anger\n","          ...   \n","15995    sadness\n","15996    sadness\n","15997        joy\n","15998      anger\n","15999    sadness\n","Name: Emotion, Length: 16000, dtype: object"]},"metadata":{},"execution_count":36}],"source":["y_train"]},{"cell_type":"code","execution_count":31,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1679520480993,"user":{"displayName":"Muhammad Fadhil Al Hafiz","userId":"08954005111788787553"},"user_tz":-420},"id":"3b3vNHBFQ9Bb","outputId":"9c62e227-2607-48e9-f45e-251389a35a5e"},"outputs":[{"output_type":"stream","name":"stdout","text":["['anger' 'fear' 'joy' 'love' 'sadness' 'surprise']\n"]}],"source":["# Menyimpan label dari dataset yang diurutkan sesuai abjad secara ascending.\n","labels = y_train.unique()\n","labels.sort()\n","print(labels)"]},{"cell_type":"markdown","source":["# **Eksplorasi dan Visualisasi Dataset**"],"metadata":{"id":"e3C16mLkjZSm"}},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":39,"status":"ok","timestamp":1679518715017,"user":{"displayName":"Muhammad Fadhil Al Hafiz","userId":"08954005111788787553"},"user_tz":-420},"id":"rpaYR9KYuiS3","outputId":"5216f0c3-f966-4609-b484-df063e79b039"},"outputs":[{"output_type":"stream","name":"stdout","text":["joy         5362\n","sadness     4666\n","anger       2159\n","fear        1937\n","love        1304\n","surprise     572\n","Name: Emotion, dtype: int64\n","joy         695\n","sadness     581\n","anger       275\n","fear        224\n","love        159\n","surprise     66\n","Name: Emotion, dtype: int64\n","joy         704\n","sadness     550\n","anger       275\n","fear        212\n","love        178\n","surprise     81\n","Name: Emotion, dtype: int64\n"]}],"source":["# Mengetahui jumlah data dari masing-masing label, dari masing-masing dataset.\n","print(y_train.value_counts())\n","print(y_test.value_counts())\n","print(y_val.value_counts())"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"5TJMRYP36jNL","executionInfo":{"status":"ok","timestamp":1679518715676,"user_tz":-420,"elapsed":695,"user":{"displayName":"Muhammad Fadhil Al Hafiz","userId":"08954005111788787553"}}},"outputs":[],"source":["# Mengubah hasil dari value_counts ke dalam list untuk kepentingan plot.\n","train_labels = list(dict(y_train.value_counts()).keys())\n","train_values = list(dict(y_train.value_counts()).values())\n","\n","test_labels = list(dict(y_test.value_counts()).keys())\n","test_values = list(dict(y_test.value_counts()).values())\n","\n","val_labels = list(dict(y_val.value_counts()).keys())\n","val_values = list(dict(y_val.value_counts()).values())"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":336},"executionInfo":{"elapsed":692,"status":"ok","timestamp":1679518716363,"user":{"displayName":"Muhammad Fadhil Al Hafiz","userId":"08954005111788787553"},"user_tz":-420},"id":"_OFClA3aQpq9","outputId":"485f6ed7-e7cd-4107-e340-048dd509020f"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x360 with 3 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# Visualisasi data setiap label pada dataset train, test, dan validation.\n","colors = np.array([\"gray\", 'orangered', 'hotpink', 'gold', 'teal', 'cornflowerblue'])\n","\n","fig, ax = plt.subplots(1, 3, figsize=(15,5))\n","\n","ax[0].bar(train_labels, train_values, color=colors)\n","ax[0].set_title(\"Training data - classes counts\")\n","\n","ax[1].bar(test_labels, test_values, color=colors)\n","ax[1].set_title(\"Testing data - classes counts\")\n","\n","ax[2].bar(val_labels, val_values, color=colors)\n","ax[2].set_title(\"Validation data - classes counts\")\n","plt.show()"]},{"cell_type":"markdown","source":["# **Label Encoding dan Data Preprocessing (*Tokenization* dan *Embedding*)**"],"metadata":{"id":"vVkybJ6wjemM"}},{"cell_type":"code","execution_count":13,"metadata":{"id":"V9F2tWMGQpq_","executionInfo":{"status":"ok","timestamp":1679518716364,"user_tz":-420,"elapsed":13,"user":{"displayName":"Muhammad Fadhil Al Hafiz","userId":"08954005111788787553"}}},"outputs":[],"source":["# Melakukan encoding label.\n","le = LabelEncoder()\n","y_train = le.fit_transform(y_train)\n","y_test = le.fit_transform(y_test)\n","y_val = le.fit_transform(y_val)\n","\n","y_train = y_train.reshape(-1,1)\n","y_test = y_test.reshape(-1,1)\n","y_val = y_val.reshape(-1,1)"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1679518716365,"user":{"displayName":"Muhammad Fadhil Al Hafiz","userId":"08954005111788787553"},"user_tz":-420},"id":"dx4YKzhikLIA","outputId":"69891357-57a3-41c0-8443-ebb9c15b1fdb"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[4],\n","       [4],\n","       [0],\n","       ...,\n","       [2],\n","       [0],\n","       [4]])"]},"metadata":{},"execution_count":14}],"source":["y_train"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2474,"status":"ok","timestamp":1679518718830,"user":{"displayName":"Muhammad Fadhil Al Hafiz","userId":"08954005111788787553"},"user_tz":-420},"id":"d40kAQnHQprC","outputId":"94d8be36-3da2-42ce-d653-376a6e969e22"},"outputs":[{"output_type":"stream","name":"stdout","text":["Vocabulary size = 16185\n"]}],"source":["# Tokenisasi dataset.\n","max_len = 256\n","tokenizer = Tokenizer()\n","tokenizer.fit_on_texts(pd.concat([X_train, X_test], axis=0))\n","\n","sequences_train = tokenizer.texts_to_sequences(X_train)\n","sequences_test = tokenizer.texts_to_sequences(X_test)\n","sequences_val = tokenizer.texts_to_sequences(X_val)\n","\n","X_train = pad_sequences(sequences_train, padding='pre',maxlen=max_len, truncating='pre')\n","X_test = pad_sequences(sequences_test, padding='pre', maxlen=max_len, truncating='pre')\n","X_val = pad_sequences(sequences_val, padding='pre', maxlen=max_len, truncating='pre')\n","\n","vocabSize = len(tokenizer.index_word) + 1\n","print(f\"Vocabulary size = {vocabSize}\")"]},{"cell_type":"code","execution_count":41,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25603,"status":"ok","timestamp":1679525257370,"user":{"displayName":"Muhammad Fadhil Al Hafiz","userId":"08954005111788787553"},"user_tz":-420},"id":"e67R2xDlQprD","outputId":"f4b1ec97-b6c8-4714-ca89-9c9059423695"},"outputs":[{"output_type":"stream","name":"stdout","text":["Terdapat 400000 vektor kata.\n","Berhasil mengkonversi 15069 kata (1115 kata gagal)\n"]}],"source":["# Melakukan embedding dengan menggunakan GloVE (Global Vector) yang merupakan model embedding yang sudah dilatih.\n","# Membaca file GloVE embedding.\n","path_to_glove_file = ds_path + '/glove.6B.200d.txt'\n","num_tokens = vocabSize\n","embedding_dim = 200\n","hits = 0\n","misses = 0\n","embeddings_index = {}\n","\n","# Membaca vector.\n","with open(path_to_glove_file) as f:\n","    for line in f:\n","        word, coefs = line.split(maxsplit=1)\n","        coefs = np.fromstring(coefs, \"f\", sep=\" \")\n","        embeddings_index[word] = coefs\n","print(\"Terdapat %s vektor kata.\" % len(embeddings_index))\n","\n","\n","# Melakukan assignment vector ke vocabulary dataset.\n","embedding_matrix = np.zeros((num_tokens, embedding_dim))\n","for word, i in tokenizer.word_index.items():\n","    embedding_vector = embeddings_index.get(word)\n","    if embedding_vector is not None:\n","        # Seluruh kata yang tidak terdapat pada indekx embedding akan dianggap 0.\n","        # termasuk hasil padding dan OOV.\n","        embedding_matrix[i] = embedding_vector\n","        hits += 1\n","    else:\n","        misses += 1\n","print(\"Berhasil mengkonversi %d kata (%d kata gagal)\" % (hits, misses))"]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":38,"status":"ok","timestamp":1679518748394,"user":{"displayName":"Muhammad Fadhil Al Hafiz","userId":"08954005111788787553"},"user_tz":-420},"id":"HoS6qX3Js2Vo","outputId":"a53d6b5a-ad0d-42c7-e51d-8ae21597a878"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[   0    0    0 ...  138    2  642]\n"," [   0    0    0 ...    3   21 1344]\n"," [   0    0    0 ...    2  462  414]\n"," ...\n"," [   0    0    0 ...    3  104 1429]\n"," [   0    0    0 ...  333    8   42]\n"," [   0    0    0 ...   25 3855   12]]\n"]}],"source":["print(X_train)"]},{"cell_type":"markdown","source":["# **NLP Model Building**"],"metadata":{"id":"eySR4GNBj6UK"}},{"cell_type":"code","execution_count":18,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2344,"status":"ok","timestamp":1679518750706,"user":{"displayName":"Muhammad Fadhil Al Hafiz","userId":"08954005111788787553"},"user_tz":-420},"id":"wSJWnBz2QprE","outputId":"ef1b4c07-d9b5-4577-90dc-bd65c67fa034"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding (Embedding)       (None, 256, 200)          3237000   \n","                                                                 \n"," bidirectional (Bidirectiona  (None, 256, 64)          59648     \n"," l)                                                              \n","                                                                 \n"," bidirectional_1 (Bidirectio  (None, 64)               24832     \n"," nal)                                                            \n","                                                                 \n"," dropout (Dropout)           (None, 64)                0         \n","                                                                 \n"," dense (Dense)               (None, 256)               16640     \n","                                                                 \n"," dropout_1 (Dropout)         (None, 256)               0         \n","                                                                 \n"," dense_1 (Dense)             (None, 128)               32896     \n","                                                                 \n"," dropout_2 (Dropout)         (None, 128)               0         \n","                                                                 \n"," dense_2 (Dense)             (None, 32)                4128      \n","                                                                 \n"," dropout_3 (Dropout)         (None, 32)                0         \n","                                                                 \n"," dense_3 (Dense)             (None, 6)                 198       \n","                                                                 \n","=================================================================\n","Total params: 3,375,342\n","Trainable params: 3,375,342\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}],"source":["# Membangun arsitektur dari model.\n","# Memanfaatkan Bidirectional LSTM, agar mendapatkan hasil yang lebih baik.\n","# Berdasarkan informasi yang saya baca, Bidirectional LSTM digunakan agar model dapat memahami informasi kontekstual dari sebuah data (kalimat) lebih baik. \n","\n","adam = Adam(learning_rate=0.005)\n","\n","model = tf.keras.models.Sequential([tf.keras.layers.Embedding(vocabSize, embedding_dim, weights=[embedding_matrix], input_length = 256, trainable=True),\n","                                    Bidirectional(LSTM(32, return_sequences=True)), \n","                                    Bidirectional(LSTM(32, return_sequences=False)), \n","                                    tf.keras.layers.Dropout(0.3),\n","                                    Dense(256, activation='relu'),\n","                                    Dropout(0.5),\n","                                    Dense(128, activation='relu'),\n","                                    Dropout(0.3),\n","                                    Dense(32, activation='relu'),\n","                                    Dropout(0.2),\n","                                    tf.keras.layers.Dense(6, activation='softmax')])\n","\n","model.summary()\n","model.compile(loss='sparse_categorical_crossentropy', optimizer=adam, metrics=['accuracy'])"]},{"cell_type":"code","execution_count":19,"metadata":{"id":"VSjuWsCsQprG","executionInfo":{"status":"ok","timestamp":1679518750707,"user_tz":-420,"elapsed":13,"user":{"displayName":"Muhammad Fadhil Al Hafiz","userId":"08954005111788787553"}}},"outputs":[],"source":["# Menggunakan Callback berupa early stopping yang akan memberikan sinyal stop apabila,\n","# nilai val_loss (diwakili dari parameter monitor) tidak mengalami perbaikan/pengurangan (diwakili dari parameter min_delta) selama 3 epoch berturut-turut (diwakili parameter patience).\n","callback = EarlyStopping(\n","    monitor='val_loss',\n","    min_delta=0,\n","    patience=3,\n","    verbose=0,\n","    mode='auto',\n","    baseline=None,\n","    restore_best_weights=False\n",")"]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CM_GyHrFQprI","outputId":"4556fee1-81ca-49ba-d5b5-e842e9f17abd","executionInfo":{"status":"ok","timestamp":1679519851597,"user_tz":-420,"elapsed":1100901,"user":{"displayName":"Muhammad Fadhil Al Hafiz","userId":"08954005111788787553"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","63/63 [==============================] - 170s 3s/step - loss: 1.3212 - accuracy: 0.4769 - val_loss: 0.7863 - val_accuracy: 0.6850\n","Epoch 2/20\n","63/63 [==============================] - 155s 2s/step - loss: 0.5657 - accuracy: 0.7759 - val_loss: 0.4508 - val_accuracy: 0.8495\n","Epoch 3/20\n","63/63 [==============================] - 150s 2s/step - loss: 0.2977 - accuracy: 0.9042 - val_loss: 0.2849 - val_accuracy: 0.9140\n","Epoch 4/20\n","63/63 [==============================] - 157s 2s/step - loss: 0.1867 - accuracy: 0.9389 - val_loss: 0.2605 - val_accuracy: 0.9205\n","Epoch 5/20\n","63/63 [==============================] - 159s 3s/step - loss: 0.1254 - accuracy: 0.9550 - val_loss: 0.2833 - val_accuracy: 0.9190\n","Epoch 6/20\n","63/63 [==============================] - 157s 3s/step - loss: 0.0993 - accuracy: 0.9679 - val_loss: 0.3948 - val_accuracy: 0.9175\n","Epoch 7/20\n","63/63 [==============================] - 152s 2s/step - loss: 0.0748 - accuracy: 0.9739 - val_loss: 0.4945 - val_accuracy: 0.9100\n"]}],"source":["# Training model.\n","history = model.fit(X_train, y_train, batch_size=256,epochs=20, validation_data=(X_val, y_val),callbacks=callback)"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"Duln-TnJQprI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1679519872155,"user_tz":-420,"elapsed":20578,"user":{"displayName":"Muhammad Fadhil Al Hafiz","userId":"08954005111788787553"}},"outputId":"2fa65335-a810-4ddc-9498-fc6d8ca0b87c"},"outputs":[{"output_type":"stream","name":"stdout","text":["63/63 [==============================] - 9s 141ms/step - loss: 0.4945 - accuracy: 0.9100\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.49453720450401306, 0.9100000262260437]"]},"metadata":{},"execution_count":21}],"source":["# Evaluasi model menggunakan dataset validation.\n","model.evaluate(X_val, y_val, verbose=1)"]},{"cell_type":"markdown","source":["# **Visualisasi History of Metrics pada Proses Training**"],"metadata":{"id":"hoU9Y6cxkAwb"}},{"cell_type":"code","execution_count":22,"metadata":{"id":"0E60nVznQprO","colab":{"base_uri":"https://localhost:8080/","height":545},"executionInfo":{"status":"ok","timestamp":1679519872156,"user_tz":-420,"elapsed":72,"user":{"displayName":"Muhammad Fadhil Al Hafiz","userId":"08954005111788787553"}},"outputId":"175d01bc-c303-43f0-af3f-6e0c8c03d86a"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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dHQ0tWvXPmm5u+66i2nTphEfH8+GDRsK96a7d+9Oz549SUhIoHXr1owdOxaAt956i5dffpkLL7yQDh06sGvXLpo1a0bfvn254IIL6Nu3L23atCm2rqeffpqLL76Yjh07cs455xQ+/9JLL7F06VJatWpFu3btWL9+PQDVq1ena9eu9O3bN+gjZMQYE9QGCyQkJJiUlBT/rXDqVBg4EL74Av76V/+tV6kg+OWXXzj33HOdLsNxmZmZ1KpVC2MMw4YNo3nz5tx7771Ol1Um+fn5tG3bljlz5tC8efNyrcvT74WIrDDGeBwnGh576MbAyy/D+edD165OV6OU8tEbb7xB69atOf/88zl48CB33nmn0yWVyfr16zn77LO5/PLLyx3mvgiPg6LLl8OqVfDaazpUUakQdu+994bcHrm78847r3BcuhO82kMXke4islFENonIQx5eTxSRdBFZ7brd7v9SS5CUBHXqwE03BbVZpZSqSErdQxeRCGA80A1IA5JFZL4xZn2RRWcZY4YHoMaS7dgB771nT/N3G2qklFKVjTd76O2BTcaYLcaYY8BMoFdgyyqD116DvDwYNszpSpRSylHeBHpTwP082TTXc0VdKyJrRWSuiHic4lBE7hCRFBFJSU9P96HcIo4ehddfh6uugrPOKv/6lFIqhPlrlMtHQKwx5kLgc2Cap4WMMRONMQnGmIQGDRqUv9XZs2HPHp1VUaly6tq1K4sWLTrhuXHjxjG0hOsJdOnShYKhx3//+985cODAScuMHj26cDx4cebNm1c4hhvgiSeeYPHixWWoXhXwJtC3A+573DGu5woZY/YaY466Hk4C2vmnvFIkJcE558AVVwSlOaXC1YABA5g5c+YJz82cObPYCbKKWrBgAXXq1PGp7aKB/tRTT3FFiP2fLjhb1WneBHoy0FxE4kSkOtAfmO++gIg0dnvYE/jFfyUW44cfIDkZhg/XoYoqrIwcCV26+Pfmms21WNdddx2ffPJJ4cUsUlNT2bFjB5deeilDhw4lISGB888/nyeffNLj+2NjY/nzzz8BGDNmDC1atKBTp05s3LixcJk33niDiy66iPj4eK699lqysrJYvnw58+fP54EHHqB169Zs3ryZxMRE5s6dC8AXX3xBmzZtaNWqFYMGDeLo0aOF7T355JO0bduWVq1asWHDhpNqSk1N5dJLL6Vt27a0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\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["# Visualisasi history dari loss dan accuracy model selama proses training.\n","# Sumbu-X mewakili epoch dan Sumbu-Y mewakili nilai dari metrics.\n","\n","%matplotlib inline\n","import matplotlib.pyplot as plt\n","acc = history.history['accuracy']\n","val_acc = history.history['val_accuracy']\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","\n","epochs = range(len(acc))\n","\n","plt.plot(epochs, acc, 'r', label='Training accuracy')\n","plt.plot(epochs, val_acc, 'b', label='Validation accuracy')\n","plt.title('Training and validation accuracy')\n","plt.legend()\n","plt.figure()\n","\n","plt.plot(epochs, loss, 'r', label='Training Loss')\n","plt.plot(epochs, val_loss, 'b', label='Validation Loss')\n","plt.title('Training and validation loss')\n","plt.legend()\n","\n","plt.show()"]},{"cell_type":"markdown","source":["# **Uji dengan Customized Data**"],"metadata":{"id":"rMEJMfsTkS2F"}},{"cell_type":"code","execution_count":32,"metadata":{"id":"hFGFd0gQQprP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1679520489178,"user_tz":-420,"elapsed":688,"user":{"displayName":"Muhammad Fadhil Al Hafiz","userId":"08954005111788787553"}},"outputId":"2496fbd6-76cf-475a-b54a-50789d6f1035"},"outputs":[{"output_type":"stream","name":"stdout","text":["you won and i am proud of you\n","1/1 [==============================] - 0s 72ms/step\n","1/1 [==============================] - 0s 60ms/step\n","joy : 61.18263602256775 %\n","\n","i lost the game and i am disappointed\n","1/1 [==============================] - 0s 73ms/step\n","1/1 [==============================] - 0s 66ms/step\n","sadness : 99.98615980148315 %\n","\n","it made me shocked and gasped\n","1/1 [==============================] - 0s 65ms/step\n","1/1 [==============================] - 0s 60ms/step\n","surprise : 88.42703104019165 %\n","\n"]}],"source":["# Membuat kalimat custom untuk diuji dengan model yang sudah dikembangkan.\n","sentences = [\n","            \"you won and i am proud of you\",\n","             \"i lost the game and i am disappointed\", \n","             \"it made me shocked and gasped\"       \n","            ]     \n","          \n","for sentence in sentences:\n","    print(sentence)\n","    sentence = clean(sentence)\n","    sentence = tokenizer.texts_to_sequences([sentence])\n","    sentence = pad_sequences(sentence, maxlen=max_len, truncating='pre')\n","\n","    # Mengambil nilai tertinggi dari probabilitas kelas dari hasil prediksi model.\n","    proba =  np.max(model.predict(sentence))\n","    \n","    # Mencari index dari nilai tertinggi tersebut.\n","    index = np.argmax(model.predict(sentence))\n","    \n","    # Mencari kelas dari nilai tertinggi tersebut pada variabel labels yang sudah didefinisikan sebelumnya.\n","    result = labels[index]\n","    print(f\"{result} : {proba*100} %\\n\")"]},{"cell_type":"markdown","source":["# **Saving the Model**"],"metadata":{"id":"KSqiIf6vkWVA"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"1OAz47lBQprP","executionInfo":{"status":"aborted","timestamp":1679519874505,"user_tz":-420,"elapsed":18,"user":{"displayName":"Muhammad Fadhil Al Hafiz","userId":"08954005111788787553"}}},"outputs":[],"source":["# Menyimpan tokenizer dan label encoder dari proyek ini dalam file pickle dan model NLP proyek ini dalam ekstensi file .h5 (apabila diperlukan).\n","import pickle\n","from google.colab import files\n","\n","with open('tokenizer.pickle', 'wb') as f:\n","    pickle.dump(tokenizer, f)\n","    \n","with open('labelEncoder.pickle', 'wb') as f:\n","    pickle.dump(le, f)\n","    \n","    \n","model.save('Emotion Recognition.h5')\n","files.download('Emotion Recognition.h5')"]}],"metadata":{"colab":{"provenance":[{"file_id":"1_bwcMBqgI476U0hDNuQHR154G-1qsUNh","timestamp":1679513188030}]},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.4"}},"nbformat":4,"nbformat_minor":0}